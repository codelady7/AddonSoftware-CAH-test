rem --- Order Fullfillment Report
rem --- Program opr_fillmntrpt.aon

rem --- AddonSoftware Version 22.00
rem --- Copyright BASIS International Ltd.  All Rights Reserved.

    seterr std_error
    setesc std_error

rem --- Document initializations

    OutVect!=bbjAPI().makeVector()
    HdrVect!=bbjAPI().makeVector()
    BrkVect!=bbjAPI().makeVector()
    TotVect!=bbjAPI().makeVector()
    
    rep_date$=date(0:"%Mz/%Dz/%Yd")
    rep_date_stamp$=date(0:"%Yd%Mz%Dz")
    rep_time$=date(0:"%hz:%mz %p")
    rep_time_stamp$=date(0:"%Hz%mz%sz")
    rep_prog$=pgm(-2)

rem --- Retrieve the program path

    pgmdir$=stbl("+DIR_PGM",err=*next)

rem --- Retrieve sysinfo data

    sysinfo_template$=stbl("+SYSINFO_TPL",err=*next)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=*next)
    firm_id$=sysinfo.firm_id$

    milestone=50
    milestone=num(stbl("+MILESTONE",err=*next))

rem --- Open/Lock files

    files=11,begfile=1,endfile=files
    dim files$[files],options$[files],ids$[files],templates$[files],channels[files]
    files$[1]="opt-01",        ids$[1]="OPT_INVHDR"
    files$[2]="opt-11",        ids$[2]="OPT_INVDET"
    files$[3]="opt_fillmnthdr",ids$[3]="OPT_FILLMNTHDR"
    files$[4]="opt_fillmntdet",ids$[4]="OPT_FILLMNTDET"
    files$[5]="opt_carthdr",   ids$[5]="OPT_CARTHDR"
    files$[6]="opt_cartdet",   ids$[6]="OPT_CARTDET"
    files$[7]="arm-01",        ids$[7]="ARM_CUSTMAST"
    files$[8]="opm-02",        ids$[8]="OPC_LINECODE"
    files$[9]="ivs_params",    ids$[9]="IVS_PARAMS"
    files$[10]="ivm-01",       ids$[10]="IVM_ITEMMAST"
    files$[11]="opt_invkitdet",       ids$[11]="OPT_INVKITDET"

    call pgmdir$+"adc_fileopen.aon",action,begfile,endfile,files$[all],options$[all],
:       ids$[all],templates$[all],channels[all],batch,status
    if status goto std_exit
    
    optInvHdr_dev=channels[1]
    optInvDet_dev=channels[2]
    optFillmntHdr_dev=channels[3]
    optFillmntDet_dev=channels[4]
    optCartHdr_dev=channels[5]
    optCartDet_dev=channels[6]
    armCustMast_dev=channels[7]
    opcLineCode_dev=channels[8]
    ivsParams_dev=channels[9]
    ivmItemMast_dev=channels[10]
    optInvKitDet_dev=channels[11]

rem --- Dimension string templates

    dim optInvHdr$:templates$[1]
    optInvDet_tpl$=templates$[2]
    dim optInvDet$:optInvDet_tpl$
    dim optFillmntHdr$:templates$[3]
    dim optFillmntDet$:templates$[4]
    dim optCartHdr$:templates$[5]
    dim optCartDet$:templates$[6]
    dim armCustMast$:templates$[7]
    dim opcLineCode$:templates$[8]
    dim ivsParams$:templates$[9]
    dim ivmItemMast$:templates$[10]
    optInvKitDet_tpl$=templates$[11]
    dim optInvKitDet$:optInvKitDet_tpl$

rem --- Assign form input values to local variables

    rpt_selection$ = option!.getOptionData("RPT_SELECTION")
    rptSelectionDesc$=callpoint!.getDevObject("rptSelectionDesc")

rem --- Initializations

    recs=0
    total_recs=0
    headings=3
    h0=132
    dim headings$[headings+1]
    headings$[0]=sysinfo.firm_name$,headings$[1]=sysinfo.task_desc$
    headings$[3]=rptSelectionDesc$
    when$=sysinfo.system_date$,clock$=""
    notOnFile$=Translate!.getTranslation("AON_NOT_ON_FILE","Not On File")

    dim i[5]
    findrecord(ivsParams_dev,key=firm_id$+"IV00",dom=std_missing_params)ivsParams$
    i[0]=ivsParams.item_id_len
    i[1]=num(ivsParams.precision$)
    i[2]=ivsParams.ls_no_len
    i[3]=num(ivsParams.desc_len_01$)
    i[4]=num(ivsParams.desc_len_02$)
    i[5]=num(ivsParams.desc_len_03$)

    call pgmdir$+"adc_getmask.aon","","AR","I","",m0$,m0,0
    call pgmdir$+"adc_getmask.aon","","IV","A",imask$,m1$,m1,0
    call pgmdir$+"adc_getmask.aon","","IV","U",imask$,m2$,m2,0
    call pgmdir$+"adc_getmask.aon","","IV","I","",ivIMask$,0,0

    columns = 12
    dim columns$[columns,10]
    columns$[0,0]=Translate!.getTranslation("AON_CUSTOMER^NUMBER","Customer^Number"),                              columns$[0,1]="C", columns$[0,2]="7"
    columns$[1,0]=Translate!.getTranslation("AON_CUSTOMER_NAME","Customer Name"),                                  columns$[1,1]="C", columns$[1,2]="20"
    columns$[2,0]=Translate!.getTranslation("AON_ORDER^NUMBER","Order^Number"),                                    columns$[2,1]="C", columns$[2,2]="10"
    columns$[3,0]=Translate!.getTranslation("AON_ORDER","Order")+"^"+Translate!.getTranslation("AON_DATE","Date"), columns$[3,1]="C", columns$[3,2]="10"
    columns$[4,0]=Translate!.getTranslation("AON_SHIP","Ship")+"^"+Translate!.getTranslation("AON_","Date"),       columns$[4,1]="C", columns$[4,2]="10"
    columns$[5,0]=Translate!.getTranslation("AON_BY","By"),                                             columns$[5,1]="C", columns$[5,2]="10",columns$[5,5]="C"
    columns$[6,0]=Translate!.getTranslation("AON_SLS","Sls"),                                           columns$[6,1]="C", columns$[6,2]="10",columns$[6,5]="C"
    columns$[7,0]="",                                                                                   columns$[7,1]="C", columns$[7,2]="10",columns$[7,5]="C"
    columns$[8,0]="",                                                                                   columns$[8,1]="C", columns$[8,2]="10",columns$[8,5]="C"
    columns$[9,0]="",                                                                                   columns$[9,1]="C",columns$[9,2]="10",columns$[9,5]="C"
    columns$[10,0]="",                                                                                  columns$[10,1]="C",columns$[10,2]="10",columns$[10,5]="C"
    columns$[11,0]=Translate!.getTranslation("AON_ALL","All")+" "+Translate!.getTranslation("AON_PACKED","Packed"),columns$[11,1]="C",columns$[11,2]="10",columns$[11,5]="C"
    columns$[12,0]=Translate!.getTranslation("AON_SHIPPED","Shipped"),                                  columns$[12,1]="C",columns$[12,2]="10",columns$[12,5]="C"

    call stbl("+DIR_PGM",err=*next)+"adc_docout_adj.aon",columns$[all]

rem --- Background

    call pgmdir$+"adc_progress.aon","N","","","","",0,optInvHdr_dev,1,meter_num,status
    if status = 999 then goto std_exit

rem ---Initial File Read

    read (optInvHdr_dev,key=firm_id$+"E",knum="AO_STATUS",dom=*next)

rem --- Main Loop Starts

    readyToInvoice!=bbjAPI().makeVector()
    while 1
        optInvHdr_key$=key(optInvHdr_dev,end=*break)
        if pos(firm_id$+"E"=optInvHdr_key$)<>1 then break
        readrecord(optInvHdr_dev,end=*break)optInvHdr$
        if optInvHdr.invoice_type$<>"S" or optInvHdr.ordinv_flag$<>"O" then continue
        ar_type$=optInvHdr.ar_type$
        customer_id$=optInvHdr.customer_id$
        order_no$=optInvHdr.order_no$
        ar_inv_no$=optInvHdr.ar_inv_no$

        total_recs=total_recs+1
        if mod(total_recs,milestone)=0 then call pgmdir$+"adc_progress.aon","S","","","","",0,0,milestone,meter_num,status
        if status = 999 then goto std_exit

        rem --- Order in Fulfillment, and Completed?
        redim optFillmntHdr$
        readrecord(optFillmntHdr_dev,key=optInvHdr_key$,knum="AO_STATUS",dom=*next)optFillmntHdr$
        if rpt_selection$="S" and cvs(optFillmntHdr.customer_id$,2)<>"" then continue
        
        rem --- Has the Order shipped?
        shipped$=""
        if cvs(optFillmntHdr.customer_id$,2)<>"" then
            rem --- Order is in Fulfillment
            shipped$="N"
            read(optCartHdr_dev,key=optInvHdr_key$,knum="AO_STATUS",dom=*next)
            while 1
                optCartHdr_key$=key(optCartHdr_dev,end=*break)
                if pos(optInvHdr_key$=optCartHdr_key$)<>1 then break
                readrecord(optCartHdr_dev)optCartHdr$
                if optCartHdr.shipped_flag$<>"Y" then
                    shipped$="N"
                    break
                endif
                shipped$="Y"
            wend

            if optFillmntHdr.all_packed$="Y" and shipped$="Y" then
                if rpt_selection$="C" then continue
                readyToInvoice!.addItem(optInvHdr_key$)
            else
                if rpt_selection$="R" then continue
            endif
        else
            if rpt_selection$<>"S" then continue
        endif
        
        rem --- Get customer's name
        redim armCustMast$
        armCustMast.customer_name$=notOnFile$
        findrecord(armCustMast_dev,key=firm_id$+optInvHdr.customer_id$,dom=*next)armCustMast$

        rem --- Order header info
        if recs then xwk = fnblank(13)
        OutVect!.addItem(fnmask$(customer_id$(1,m0),m0$))
        OutVect!.addItem(armCustMast.customer_name$)
        OutVect!.addItem(order_no$)
        OutVect!.addItem(fndate$(optInvHdr.order_date$))
        OutVect!.addItem(fndate$(optInvHdr.shipmnt_date$))
        OutVect!.addItem(optInvHdr.ord_taken_by$)
        OutVect!.addItem(optInvHdr.slspsn_code$)
        xwk = fnblank(4)
        OutVect!.addItem(optFillmntHdr.all_packed$)
        OutVect!.addItem(shipped$)
        recs=recs+1

        rem --- Row headings for order detail info
        xwk = fnblank(1)
        OutVect!.addItem(Translate!.getTranslation("AON_CD","Cd")+"  "+Translate!.getTranslation("AON_ITEM","Item")+$00$+"B")
        OutVect!.addItem(Translate!.getTranslation("AON_DESCRIPTION","Description")+"/"+Translate!.getTranslation("AON_MEMO","Memo")+$00$+"B")
        xwk = fnblank(3)
        OutVect!.addItem(Translate!.getTranslation("AON_ORDERED","Ordered")+$00$+"B")
        OutVect!.addItem(Translate!.getTranslation("AON_BACKORDER","Backorder")+$00$+"B")
        OutVect!.addItem(Translate!.getTranslation("AON_PICKED","Picked")+$00$+"B")
        OutVect!.addItem(Translate!.getTranslation("AON_PACKED","Packed")+$00$+"B")
        OutVect!.addItem(Translate!.getTranslation("AON_SHIPPED","Shipped")+$00$+"B")
        xwk = fnblank(2)

        lineNo=0
        read(optInvDet_dev,key=optInvHdr_key$,knum="AO_STATUS",dom=*next)
        while 1
            optInvDet_key$=key(optInvDet_dev,end=*break)
            if pos(optInvHdr_key$=optInvDet_key$)<>1 then break
            readrecord(optInvDet_dev)optInvDet$

            rem --- Explode kits into their components
            redim ivmItemMast$
            findrecord(ivmItemMast_dev,key=firm_id$+optInvDet.item_id$,dom=*next)ivmItemMast$
            if ivmItemMast.kit$="N" then
                gosub doDetailLine
            else
                rem --- Explode this kit into its components
                optInvKitDet_key$=firm_id$+optInvDet.ar_type$+optInvDet.customer_id$+optInvDet.order_no$+optInvDet.ar_inv_no$+optInvDet.internal_seq_no$
                dim optInvDet$:optInvKitDet_tpl$; rem --- Temporarily set the optInvDet$ string to the opt_invkitdet template
                read(optInvKitDet_dev,key=optInvKitDet_key$,dom=*next)
                while 1
                    thisKey$=key(optInvKitDet_dev,end=*break)
                    if pos(optInvKitDet_key$=thisKey$)<>1 then break
                    readrecord(optInvKitDet_dev,key=thisKey$)optInvDet$

                    optInvDet_key$=firm_id$+"E"+ar_type$+customer_id$+order_no$+ar_inv_no$+optInvDet.internal_seq_no$
                    gosub doDetailLine
                wend
                dim optInvDet$:optInvDet_tpl$; rem --- Reset the optInvDet$ string back to the opt_invdet template
            endif
        wend
    wend
    out_action$="FORMAT"

rem --- All done

    if recs=0
        msg_id$="DOC_OUTPUT_NODATA"
        gosub disp_message
        goto std_exit_no_report
    endif

    if rpt_selection$="R" then 
        next_overlay$="opu_fillmntrpt.aon"
    endif

    goto std_exit

doDetailLine: rem --- Prepare and print this detail line
    rem --- Get the Line Type
    findrecord(opcLineCode_dev,key=firm_id$+optInvDet.line_code$,dom=*continue)opcLineCode$

    rem --- Get quantity picked
    qty_picked=0
    read(optFillmntDet_dev,key=optInvDet_key$,knum="AO_STATUS_ORDDET",dom=*next)
    optFillmntDet_key$=key(optFillmntDet_dev,end=*next)
    if pos(optInvDet_key$=optFillmntDet_key$)=1 then
        readrecord(optFillmntDet_dev)optFillmntDet$
        qty_picked=optFillmntDet.qty_picked
    endif

    rem --- Get quantity packed and quantity shipped
    qty_packed=0
    qty_shipped=0
    read(optCartDet_dev,key=optInvDet_key$,knum="AO_ORDDET_CART",dom=*next)
    while 1
        optCartDet_key$=key(optCartDet_dev,end=*break)
        if pos(optInvDet_key$=optCartDet_key$)<>1 then break
        readrecord(optCartDet_dev)optCartDet$
        qty_packed=qty_packed+optCartDet.qty_packed
        
        optCartHdr_key$=firm_id$+"E"+ar_type$+customer_id$+order_no$+ar_inv_no$+optCartDet.carton_no$
        findrecord(optCartHdr_dev,key=optCartHdr_key$,knum="AO_STATUS",dom=*continue)optCartHdr$
        if optCartHdr.shipped_flag$="Y" then qty_shipped=qty_shipped++optCartDet.qty_packed
    wend
 
    if pos(opcLineCode.line_type$="MO") then
        rem --- Memo (M) and Other (O) line types
        xwk = fnblank(1)
        OutVect!.addItem(optInvDet.line_code$)
        OutVect!.addItem(optInvDet.order_memo$)
        xwk = fnblank(10)
    else
        rem --- Regular Sale (S), Non-Stock (N) and Special Distribution (P) line types
        rem --- Get Item Description
        redim ivmItemMast$
        findrecord(ivmItemMast_dev,key=firm_id$+optInvDet.item_id$,dom=*next)ivmItemMast$
        
        xwk = fnblank(1)
        OutVect!.addItem(optInvDet.line_code$+"     "+fnmask$(optInvDet.item_id$,ivIMask$))
        if opcLineCode.line_type$="N" then
            OutVect!.addItem(optInvDet.order_memo$)
        else
            OutVect!.addItem(fnitem$(ivmItemMast.item_desc$,i[3],i[4],i[5]))
        endif
        xwk = fnblank(3)
        OutVect!.addItem(str(optInvDet.qty_ordered:m2$))
        OutVect!.addItem(str(optInvDet.qty_ordered-qty_shipped:m2$))
        OutVect!.addItem(str(qty_picked:m2$))
        OutVect!.addItem(str(qty_packed:m2$))
        OutVect!.addItem(str(qty_shipped:m2$))
        xwk = fnblank(2)
    endif

    return
    
rem --- Date/time handling functions

    def fndate$(q$)
        q1$=""
        q1$=date(jul(num(q$(1,4)),num(q$(5,2)),num(q$(7,2)),err=*next),err=*next)
        if q1$="" q1$=q$
        return q1$
    fnend

rem --- Format inventory item description

    def fnitem$(q$,q1,q2,q3)
        q$=pad(q$,q1+q2+q3)
        return cvs(q$(1,q1)+" "+q$(q1+1,q2)+" "+q$(q1+q2+1,q3),32)
    fnend

rem --- fnmask$: Alphanumeric Masking Function (formerly fnf$)

    def fnmask$(q1$,q2$)
        if cvs(q1$,2)="" return ""
        if q2$="" q2$=fill(len(q1$),"0")
        if pos("E"=cvs(q1$,4)) goto alpha_mask
:      else return str(-num(q1$,err=alpha_mask):q2$,err=alpha_mask)
alpha_mask:
        q=1
        q0=0
        while len(q2$(q))
            if pos(q2$(q,1)="-()") q0=q0+1 else q2$(q,1)="X"
            q=q+1
        wend
        if len(q1$)>len(q2$)-q0 q1$=q1$(1,len(q2$)-q0)
        return str(q1$:q2$)
    fnend

rem --- fnBlank : Create blank cells in OutVect!. No return value

    def fnblank(q0)
        for q1=1 to q0
            OutVect!.addItem("")
        next q1
        return q1
    fnend

rem #include disp_message.src

disp_message: rem --- Display Message Dialog

    call stbl("+DIR_SYP")+"bac_message.bbj",msg_id$,msg_tokens$[all],msg_opt$,table_chans$[all]
    return

rem --- #include std_error.src

std_error: rem --- Standard error handler (11Oct2017)

    if tcb(19)>0
        rem --- Escape handler
        if and(chr(tcb(19)),$08$)=$08$
            release
        else
            setesc std_error
            return
        endif
    endif

    if err=0   
        rem --- Get tcb(12) and tcb(10) to send into bac_error
        lock_byte=tcb(10)
        lock_chan=tcb(12)  
    endif

    rd_err_text$="",err_num=err
    if tcb(2)=0 and tcb(5) then rd_err_text$=pgm(tcb(5),tcb(13),err=*next)
    if err_num=252 then
        E!=BBjAPI().getLastBBjException()
        rd_err_text$=rd_err_text$+$0A$+E!.getClass().getName()
        if E!.getMessage()<>null() then rd_err_text$=rd_err_text$+": "+E!.getMessage()
    endif
    call stbl("+DIR_SYP")+"bac_error.bbj",pgm(-2),str(tcb(5)),str(err_num),rd_err_text$,rd_err_act$,lock_byte,lock_chan
    if pos("ESCAPE"=rd_err_act$) seterr 0; setesc 0
    if pos("RETRY"=rd_err_act$) retry
    if pgm(-1)<>pgm(-2) status=999; exit 
    release

rem --- #endinclude std_error.src
rem --- #include std_missing_params.src

std_missing_params: rem --- Standard missing parameter handler (15Apr2006)

    rd_err_text$=""
    if tcb(5)<>0 and pgm(-1)=pgm(-2) rd_err_text$=pgm(tcb(5))
    pgmdir$=stbl("+DIR_PGM",err=std_missing_params_exit)
    call pgmdir$+"adc_noparams.aon",err=std_missing_params_exit,pgm(-2),str(tcb(5):"00000"),
:       str(err:"000"),rd_err_text$,rd_err_act$

std_missing_params_exit: 
    master_user$=cvs(stbl("+MASTER_USER",err=std_missing_params_release),2)
    sysinfo_template$=stbl("+SYSINFO_TPL",err=std_missing_params_release)
    dim sysinfo$:sysinfo_template$
    sysinfo$=stbl("+SYSINFO",err=std_missing_params_release)
    if cvs(sysinfo.user_id$,2)=master_user$ escape

std_missing_params_release: 
    status=999
    if pgm(-1)<>pgm(-2) exit
    release

rem --- #endinclude std_missing_params.src

rem --- #include std_end.src

std_exit: rem --- Standard program end (01Mar2006)
    call stbl("+DIR_PGM")+"adc_progress.aon","D","","","","",0,0,0,meter_num,status
    run stbl("+DIR_SYP")+"bas_process_end.bbj",err=*next
    release

rem --- #endinclude std_end.src

std_exit_no_report: 

    call pgmdir$+"adc_progress.aon","D","","","","",0,0,0,0,status    
    OutVect!=null()
    goto std_exit

    end
